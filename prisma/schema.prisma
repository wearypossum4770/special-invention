datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// enum TaskStatus {
//   Pending
//   InProgress
//   Complete
//   WontDo
// }

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  username   String    @unique
  firstName  String
  middleName String?
  lastName   String
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  password   Password?
  profile    Profile?
}

model AnonymousUser {
  id           String     @id @unique @default(uuid())
  idempotentId String     @unique @default(uuid())
  slug         String     @unique @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  pageViews    PageView[]
}

model Profile {
  id        String    @id @default(cuid())
  avatar    String
  bio       String?
  notes     Note[]
  posts     Post[]
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String    @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id        String    @id @default(cuid())
  title     String
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId String
}

model Post {
  id          Int       @id @default(autoincrement())
  slug        String    @unique @default(cuid())
  title       String
  markdown    String?
  content     String?
  viewCount   Int       @default(0)
  publishedAt DateTime?
  author      Profile   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model TaskComments {
  id           String   @id
  idempotentId String   @default(uuid())
  content      String
  task         Task     @relation(fields: [idempotentId], references: [idempotentId])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  deletedAt DateTime?
}

model Task {
  id           Int            @id @default(autoincrement())
  idempotentId String         @unique @default(uuid())
  title        String
  content      String
  isCompleted  Boolean        @default(false)
  comments     TaskComments[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
}

model Project {
  id           String    @id
  idempotentId String    @default(uuid())
  title        String
  subtitle     String?
  description  String?
  projectKey   String
  type         String
  favourite    Boolean   @default(false)
  projectType  String
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Campaign {
  id           Int       @id @default(autoincrement())
  idempotentId String    @default(uuid())
  campaignName String
  campaignSlug String    @default(cuid())
  version      Int
  holdOut      Float
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Experience {
  id                    String    @id @default(uuid())
  idempotentId          String    @default(uuid())
  experienceName        String
  experienceDescription String
  priority              Int
  deletedAt             DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model PageView {
  id                 String        @id @default(uuid())
  idempotentId       String        @default(uuid())
  anonymousId        String        @default(uuid())
  anonymous          AnonymousUser @relation(fields: [anonymousId], references: [id])
  pageTitle          String
  pageLocation       String
  pagePath           String
  pageReferrer       String?
  userAgent          String
  pageEncoding       String
  engagementTimeMsec Int
}
